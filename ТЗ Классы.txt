Техническое задание
1. Реализовать класс Unit, обладающий следующим функционалом:
Открытые свойства:
Имя юнита (Name):
1.1 Задается строкой в конструкторе;
1.2 Свойство только для чтения
Здоровье юнита (Health):
2.1 Поле свойства должно быть числом типа float; поле приватное
2.2 Свойство только для чтения, возвращает поле из п 2.1;
Урон (Damage):
3.1 Возвращает число типа float, равное сумме возвращаемого урона оружия (класс Weapon, свойство Damage) и базового урона;
3.2 Базовый урон определить переменной, равной 5;
3.3 Если оружия нет - возвращать только базовый урон юнита;
Броня (Armor):
4.1 Возвращает число типа float (округленное до двух знаков);
4.2 Значение определяется в диапазоне от 0 до 1;
4.3 Значение рассчитывается как сумма показателя брони шлема (класс Helm), доспехов (класс Shell) и ботинок (класс Boots);
Открытые методы:

Конструкторы:
1.1 Без аргумента - внутри устанавливается значение по-умолчанию для имени персонажа в виде “Unknown Unit”;
1.2 Со строковым аргументом - устанавливает значение строки в свойство Name;
1.3 Конструктор без аргумента должен вызывать конструктор с аргументом через ключевое слово this;
Фактическое здоровье (RealHealth):
2.1 Не имеет аргументов;
2.2 Возвращает число типа float;
2.3 Рассчитывается, как Health * (1f + Armor);
Получить урон (SetDamage):
3.1 Возвращает bool: true - юнит погиб (Health <= 0f), false - юнит жив (обратное значение);
3.2 Внутри метода происходит расчет и выставление в поле здоровья значения: Health - value * Armor;
Снарядить оружие (EquipWeapon):
4.1 В качестве аргумента принимает экземпляр класса Weapon;
4.2 Не имеет возвращаемого значения;
4.3 Заменяет текущее оружие (если оно есть) на новое;
Набор методов снарядить броню (EquipHelm, EquipShell, EquipBoots):
5.1 В качестве аргумента принимает, соответственно, шлем, доспех или ботинки;
5.2 Не имеет возвращаемого значения;
5.3 Заменяет текущее снаряжение (если оно есть) на новое.

2. Реализовать класс Weapon, обладающий следующим функционалом:
Открытые свойства:
Имя оружия (Name):
1.1 Задается строкой в конструкторе;
1.2 Свойство только для чтения;
Минимальное значение урона (MinDamage):
2.1 Свойство с приватным сеттером;
2.2 Является числом типа float;
Максимальное значение урона (MaxDamage):
3.1. Свойство с приватным сеттером;
3.2. Является числом типа float;

Открытые методы:
Конструкторы:
1.1 Со строковым аргументом - устанавливает значение строки в свойство Name;
1.2 Со строковым аргументом и двумя числами типа float. Первое число - minDamage, второе - maxDamage;
1.3 Конструктор с тремя аргументами должен вызывать конструктор с одним аргументом через ключевое слово this и передавать в него имя оружия;
1.4 Конструктор с тремя аргументами должен вызывать в теле метод SetDamageParams;
Задать параметры урона (SetDamageParams):
2.1 Не возвращает никаких значений;
2.2 В качестве аргумента принимает два числа типа float. minDamage - задает минимальный урон оружия, maxDamage - задает максимальный урон оружия;
2.3 Внутри метода должна проверяться допустимость входных значений. Если minDamage больше maxDamage - числа меняются местами, а в консоль выводится сообщение о некорректных входных данных (с указанием имени оружия);
2.4 Если minDamage меньше 1f, минимальный урон оружия задается значением 1f, а в консоль выводится сообщение о форсированной установки минимального значения;
2.5 Если maxDamage меньше или равен 1f, то устанавливаем значение 10f;
Вернуть урон (GetDamage):
3.1 Не принимает никаких аргументов;
3.2 Возвращает число типа float, рассчитываемое, как среднее арифметическое между MinDamage и MaxDamage;

3. Реализовать классы Helm, Shell, Boots, все классы создать в одном файле Armor.cs.
Функционал классов:
Имя брони (Name):
1.1 Задается строкой в конструкторе. По-умолчанию, значение равно “Helm”, “Shell” и “Boots”, соответственно;
1.2 Свойство только для чтения;
Показатель брони (Armor):
2.1 Свойство геттером и сеттером;
2.2 Имеет тип числа типа float;
2.3 Имеет диапазон от 0f до 1f. Если задаваемое значение выходит за этот диапазон, значение округляется к диапазону и в консоль выводится сообщение о некорректно заданном свойстве;

4. Реализовать в методе Main следующую логику:
При запуске программы выводится сообщение “Подготовка к бою:”;
Выводится сообщение с запросом: “Введите имя бойца:”. Далее ожидается ввод имени юнита;
Выводится сообщение с запросом: “Введите начальное здоровье бойца (10-100):”. Далее ожидается целое число в диапазоне от 10 до 100 включительно;
Выводится сообщение с запросом: “Введите значение брони шлема от 0, до 1:”. Далее ожидается число типа float в диапазоне от 0 до 1, включительно;
Выводится сообщение с запросом: “Введите значение брони кирасы от 0, до 1:”. Далее ожидается число типа float в диапазоне от 0 до 1, включительно;
Выводится сообщение с запросом: “Введите значение брони сапог от 0, до 1:”. Далее ожидается число типа float в диапазоне от 0 до 1, включительно;
Выводится сообщение с запросом: “Укажите минимальный урон оружия (0-20): “. Далее ожидается число типа float в диапазоне от 0 до 20 включительно;
Выводится сообщение с запросом: “Укажите максимальный урон оружия (20-40): “. Далее ожидается число типа float в диапазоне от 20 до 40 включительно;
На основе введенных данных создается экземпляр класса Unit для игрока;
В консоль выводится сообщение “Общий показатель брони равен: “. Далее выводится значение свойства Armor юнита;
В консоль выводится сообщение “Фактическое значение здоровья равно: “ . Далее выводится значение свойства RealHealth;