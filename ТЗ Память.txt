Техническое задание

Структура Interval, будет использоваться для определение границ интервала чисел с плавающей точкой.

Описание структуры:

Конструкторы:

Конструктор с двумя целочисленными аргументами. Первый minValue, второй - maxValue. Конструктор вызывает внутри себя второй конструктор;
Конструктор с двумя аргументами типа числа с плавающей точкой. Первый minValue - определяет нижнюю границу интервала, второй - maxValue - определяет верхнюю границу интервала;
Конструктор с одним числом с плавающей точкой. value - вызывает внутри себя второй конструктор, где в качестве первого и второго аргумента передается свой собственный аргумент;
Внутри конструктора должна проверяться допустимость входных значений. Если minDamage больше maxDamage - числа меняются местами, а в консоль выводится сообщение о некорректных входных данных;
Если оба числа равны - инициализация должна произойти без сообщений;
Открытые свойства:

Получить (Get) - возвращает случайное число из интервала между minValue и maxValue;
Минимум (Min) - возвращает значение, равное минимальной границе интервала;
Максимум (Max) - возвращает значение, равное максимальной границе интервала;
Среднее (Average) - возвращает средне арифметическое значение интервала;
Структура Rate, будет хранить информацию об одном кадре поединка между персонажами:

Поле Unit - хранит ссылку на юнита, который наносил урон;
Поле Damage - хранит целочисленное значение урона, нанесенное юниту;
Поле Health - хранит число с плавающей точкой, означающее здоровье, оставшееся у юнита после атаки. Округляется до двух знаков после запятой;
Конструктор, принимает три аргумента: ссылка на экземпляр класса юнита, инициирующего атаку, значение нанесенного урона и значение здоровья противника.
Класс Combat, инкапсулирующий логику работы боя

Внутри класса хранится массив Rate и индекс, указывающий на текущий индекс. По-умолчанию, в Rate 1 элемент и индекс равен 0.
Конструктора нет. Конструктор по-умолчанию инициализирует массив.
Два публичных метода: StartCombat, принимающий на вход два экземпляра юнитов, и ShowResults, выводящий результат боя.
Внутри StartCombat запускается бесконечный цикл. Бой проходит в автоматическом режиме с применением случайных чисел (используйте класс Random). Если выпадает чётное число (от 1 до 10) - урон получает первый боец, если нечётное - урон получает второй боец.
Происходит создание новой структуры Rate и сохранение в массив. Если произошёл выход за пределы массива, выполняется Array.Resize Примечание: Хотя коллекции идут следующим уроком, вы можете вместо массива использовать List, тогда можно не добавлять поле индекса, а просто создать List и выполнять метод Add, без необходимости каждый раз менять размер массива
Как только здоровье одного из бойцов падает до 0, цикл завершается.
Внутри метода ShowResults происходит итерация по элементам массива Rate и выводится результат: Боец <Имя> нанёс урон <значение урона> и оставил <значение здоровья> здоровья.
Доработка игровой логики:

Структура Interval заменяет свойства MinDamage и MaxDamage. Логичным образом, т.е. оба свойства заменяются на одно, имеющее тип Interval;
В методе Main создаются два бойца. Имя и характеристики произвольны (значения здоровья не должно превышать 100, как и значение урона не должно превышать 30).
Выводятся данные бойцов
Создаётся экземпляр класса Combat.
Вызывается метод StartCombat. Перед вызовом метода в консоли выводится сообщение о начале поединка
Вызывается метод ShowResults. Перед вызовом метода в консоли выводится сообщение о завершении боя.